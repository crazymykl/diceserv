{
  @operators =
    'd': "DiceRoll"
    'D': "DiceRoll"
    'r': "RerollBelow"
    'R': "RerollAbove"
    'k': "KeepLow"
    'K': "KeepHigh"
}

mux_expression
  = lhs:multiplicative_expression op:[,#] rhs:mux_expression
  {
      type:       "MuxExpression"
      operator:   op
      left:       lhs
      right:      rhs
  } / multiplicative_expression

multiplicative_expression
  = head:additive_expression tail:([*/] multiplicative_expression)*
  {
    result = head
    for node in tail
      result =
        type:     "BinaryExpression"
        operator: node[0]
        left:     result
        right:    node[1]
    result
  }

additive_expression
  = head:ternary_expression tail:([+-] multiplicative_expression)*
  {
    result = head
    for node in tail
      result =
        type:     "BinaryExpression"
        operator: node[0]
        left:     result
        right:    node[1]
    result
  }

ternary_expression
  = lhs:value [dD] mhs:value subop:[rRkK] rhs:value
    {
      type:       "TernaryExpression"
      operator:   @operators[subop]
      left:       lhs
      middle:     mhs
      right:      rhs
    } / dice_expression

dice_expression
  = lhs:value op:[dD] rhs:dice_expression
    {
      type:       "BinaryExpression"
      operator:   @operators[op]
      left:       lhs
      right:      rhs
    } / dicepool_expression

dicepool_expression
  = lhs:value op:"sr" rhs:dice_expression
    {
      type:       "BinaryExpression"
      operator:   "Shadowrun4DicePool"
      left:       lhs
      right:      rhs
    } / postfix_dicepool_expression

postfix_dicepool_expression
  = val:value op:"sr"
    {
      type:       "UnaryExpression"
      operator:   "Shadowrun4DicePool"
      operand:    val
    } / unary_expression

unary_expression
 = op:[-dD] val:dice_expression
  {
    type:         "UnaryExpression"
    operator:     if op.toLowerCase() == 'd' then "DiceRoll" else op
    operand:      val
  } / value

value
 = "(" expr:mux_expression ")" { expr } / number

number
  = num:[0-9]+
  {
    type: "Number"
    value: parseInt num.join(''), 10
  }

